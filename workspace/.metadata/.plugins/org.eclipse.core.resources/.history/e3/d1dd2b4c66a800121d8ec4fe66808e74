package Messaging;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.AsynchronousServerSocketChannel;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.CompletionHandler;
import java.sql.SQLException;

import base.Member;
import base.RPCEntry;
import base.RPC_Match;

import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.stream.JsonWriter;

public class AIOServer extends Server{
	private AsynchronousServerSocketChannel sock;
	public AIOServer() throws ClassNotFoundException, IOException, SQLException {
		sock = AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(9999));
		System.out.println("listening");
		accecpt_conn();
		
	}
	
	public void run(){
		while(true){
			RPC_Match match = null;
			if((match = rpc_handler.getMatchup()) != null){
				AsynchronousSocketChannel human_channel = match.getHuman().getClient().getChannel();
				AsynchronousSocketChannel robot_channel = match.getRobot().getClient().getChannel();
				Response rsp = new Response(match.getHash_key());
				try {
					write(human_channel,rsp);
					write(robot_channel,rsp);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			}
		}
	}
	public void accecpt_conn(){
		sock.accept(this, new CompletionHandler<AsynchronousSocketChannel,AIOServer>(){
			@Override
			public void completed(AsynchronousSocketChannel result,
					AIOServer attachment) {
				System.out.println("got conn");
				handle(new IOPair(attachment,result));
				attachment.accecpt_conn();
			}

			@Override
			public void failed(Throwable exc, AIOServer attachment) {
				// TODO Auto-generated method stub
				System.out.println("failed");
			}});
	}
	
	protected void setGot(boolean b) {
		// TODO Auto-generated method stub
		
	}

	public void write(AsynchronousSocketChannel clnt, Message msg) throws IOException{
		ByteArrayOutputStream stream = new ByteArrayOutputStream();
		OutputStreamWriter writer = new OutputStreamWriter(stream);
		JsonWriter w = new JsonWriter(writer);
		msg.encode(w);
		ByteBuffer buf = ByteBuffer.wrap(stream.toByteArray());
		clnt.write(buf);
	}
	public void respond_to(AsynchronousSocketChannel clnt, JsonObject obj) throws SQLException, IOException{
		Message reply = get_response(obj);
		ByteArrayOutputStream output = new ByteArrayOutputStream();
		JsonWriter writer = new JsonWriter(new OutputStreamWriter(output));
		reply.encode(writer);
		System.out.println(output.toString());
		ByteBuffer buf = ByteBuffer.wrap((output.toString()+'\n').getBytes());
		clnt.write(buf);
		
	}
	public void handle(IOPair io){
		final ByteBuffer buf = io.getBuffer();
		io.getChannel().read(buf, io, new CompletionHandler<Integer,IOPair>(){
			@Override
			public void completed(Integer result, IOPair attachment) {		
				if(result > 0){
					try {
						JsonObject read = attachment.read(result);
						if(read != null){
							String type = read.get("id").getAsString();
							if(type.compareTo(RPC_Request.TYPE) == 0){
								RPC_Request req = new RPC_Request(read);
								Member m = db.getMember(req.getMember_id());
								rpc_handler.queue(new RPCEntry(attachment,m));
							}else{
								attachment.respond_to(read);
							}
						}	
					} catch (SQLException | IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				attachment.reRead();
			}

			@Override
			public void failed(Throwable exc, IOPair attachment) {
				// TODO Auto-generated method stub
				
			}});
	}
	public class IOPair{
		private AsynchronousSocketChannel clnt;
		private final ByteBuffer buf;
		private AIOServer serv;
		public int totalRead =0;
		public IOPair(AIOServer serv, AsynchronousSocketChannel clnt){
			this.serv = serv;
			this.clnt = clnt;
			this.buf = ByteBuffer.allocate(1024);
		}
		public IOPair(AIOServer serv,ByteBuffer buf, AsynchronousSocketChannel clnt){
			this.serv = serv;
			this.clnt = clnt;
			this.buf = buf;
		}
		
		public AsynchronousSocketChannel getChannel(){
			return clnt;
		}
		
		public void reRead(){
			serv.handle(this);
		}
		public void respond_to(JsonObject o) throws SQLException, IOException{
			serv.respond_to(clnt,o);
		}
		
		public ByteBuffer getBuffer(){
			return buf;
		}
		public JsonObject read(int i){
			totalRead += i;
			buf.flip();
			byte[] dst = new byte[totalRead];
			buf.get(dst);
			String s = new String(dst);
			//System.out.println(s);
			JsonObject o = null;
			try{
				o = getFrom(s);
				System.out.println(o.toString());
			}catch (Exception e){
				buf.position(totalRead);
			}
			if(o != null){
				buf.clear();
				totalRead = 0;
				return o;
			}
			return null;
		}
	}
	
	public static void main(String[] args){
		try {
			AIOServer serv = new AIOServer();
			serv.run();
		} catch (ClassNotFoundException | IOException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
}
