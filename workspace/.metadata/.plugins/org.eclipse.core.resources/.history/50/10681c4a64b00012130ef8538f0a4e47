package base;

import java.util.HashMap;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import Messaging.RPC_Action;

public class RPC_Handler {
	private BlockingQueue<RPCEntry> robotRPCQueue;
	private BlockingQueue<RPCEntry> humanRPCQueue;
	private HashMap<String,RPC_Match> matches;
	
	public RPC_Handler() {
		robotRPCQueue = new LinkedBlockingQueue<RPCEntry>();
		humanRPCQueue = new LinkedBlockingQueue<RPCEntry>();
		matches = new HashMap<String,RPC_Match>();
	}
	public void queue(RPCEntry m){
		String fac_name = m.getMember().getaFaction().getName();
		if(fac_name.compareTo("Robots") == 0){
			this.robotRPCQueue.add(m);
		}else{
			this.humanRPCQueue.add(m);
		}
	}
	
	public void process(RPC_Action a){
		String key = a.getKey();
		RPC_Match match = matches.get(key);
		if(match != null){
			match.process(a);
		}
	}
	public RPC_Match getMatchup() {
		RPCEntry robot = robotRPCQueue.peek();
		RPCEntry human = humanRPCQueue.peek();
		
		if(robot != null && human != null){
			robotRPCQueue.remove();
			humanRPCQueue.remove();
			System.out.println("FOUND MATCH!");
			RPC_Match match = new RPC_Match(robot,human);
			matches.put(match.getHash_key(), match);
			return match;
		}
		return null;
	}
	public RPC_Match findMatch(String key) {
		return matches.get(key);	
	}
	
	public void removeMatch(String k){
		matches.remove(k);
	}

}
