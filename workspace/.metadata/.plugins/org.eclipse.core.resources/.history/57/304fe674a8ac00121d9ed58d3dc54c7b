package Messaging;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;

import base.Member;
import base.RPC_Handler;

import com.google.gson.JsonObject;
import DB.AndroidDB;


public class Server extends Protocol{
	private ServerSocket sock;
	protected AndroidDB db;
	private final ExecutorService ex = Executors.newFixedThreadPool(10);
	protected RPC_Handler rpc_handler;
	
	public Server() throws IOException, SQLException{
		//sock = new ServerSocket(9999);
		db = new AndroidDB("AndroidDev","droidme");
		rpc_handler = new RPC_Handler();
	}
	public Server(int port) throws IOException, SQLException{
		sock = new ServerSocket(port);
		db = new AndroidDB("AndroidDev","droidme");
		rpc_handler = new RPC_Handler();
	}
	
	public void run() throws IOException, SQLException{
		while(true){
			System.out.println("listening");
			final Socket s = sock.accept();
			System.out.println("got connection");
			ex.execute(new Runnable(){
				public void run(){
					JsonObject obj;
					try {
						while(true){
							obj = read(s);
							handle(s,obj);
						}
					} catch (SocketException e){
						
					}catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

				}
			});

		}
	}
	public Message get_response(JsonObject o) throws SQLException, IOException{	
		String type = o.get("id").getAsString();
		Message msg = null;
		if(type.compareTo(LoginMessage.TYPE) == 0){
			String login = o.get("member").getAsString();
			String password = o .get("password").getAsString();
			if(db.login(login, password)){
				msg = new Response("success");
				msg = new Update(db.getMember(login));
			}else{
				msg = new Response("invalid login");
			}
		}else if(type.compareTo(Request.TYPE) == 0){
			Response rsp = new Response(o);
			if(rsp.getMessage().compareTo("leaderboard") == 0){
				ArrayList<Member> leaderBoard = (ArrayList<Member>) db.getLeaderBoard(10);
				msg = new LeaderBoardMessage(leaderBoard);
			}else if(rsp.getMessage().compareTo("human_points") == 0){
				msg = new Response(""+ db.getHumanPoints());	
			}else if(rsp.getMessage().compareTo("robot_points") == 0){
				msg = new Response(""+ db.getRobotPoints());	
			}else if(rsp.getMessage().compareTo("codex") == 0){
				msg = new CodexMessage(db.getCodex());	
			}else if(rsp.getMessage().compareTo("robot_board") == 0){
				List<Member> board = db.getRobotLeaderBoard(10);
				msg = new LeaderBoardMessage(board);
			}else if(rsp.getMessage().compareTo("human_board") == 0){
				List<Member> board = db.getHumanLeaderBoard(10);
				msg = new LeaderBoardMessage(board);		
			}
		}else if(type.compareTo(Update.TYPE) == 0){
			JsonObject obj = o.get("member").getAsJsonObject();
			Member m = new Member(obj);
			db.updateMember(m);
			msg = new Response("success");
		}
		return msg;
	}
	public void handle(Socket s,JsonObject o) throws IOException, SQLException{
		Message msg = get_response(o);
		if(msg != null){
			write(s,msg);
		}
	}
	
	public static void main(String[] args){
		Server serv;
		try {
			serv = new Server();
			serv.run();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
